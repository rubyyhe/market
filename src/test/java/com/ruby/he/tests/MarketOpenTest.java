package com.ruby.he.tests;

import com.ruby.he.Market;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;

import java.util.Calendar;

class MarketOpenTest {

    private static Calendar c;

    @BeforeAll
    public static void init() {
        c = Calendar.getInstance();
    }


    @Test  // Market should not open for normal holidays
    public void testNormalHolidays() {
        c.set(2021, Calendar.JANUARY, 1);
        assertEquals(false, Market.isMarketOpen(c.getTime()), "Should close for New Year's Day");

        c.set(2021, Calendar.JANUARY, 18);
        assertEquals(false,  Market.isMarketOpen(c.getTime()), "Should close for Martin Luther King Day");

        c.set(2021, Calendar.FEBRUARY, 15);
        assertEquals(false,  Market.isMarketOpen(c.getTime()), "Should close for Presidentâ€™s Day");

        c.set(2021, Calendar.APRIL, 2);
        assertEquals(false,  Market.isMarketOpen(c.getTime()), "Should close for Good Friday");

        c.set(2021, Calendar.MAY, 31);
        assertEquals(false,  Market.isMarketOpen(c.getTime()), "Should close for Memorial Day");

        c.set(2022, Calendar.JULY, 4);
        assertEquals(false,  Market.isMarketOpen(c.getTime()), "Should close for Independence Day");

        c.set(2021, Calendar.SEPTEMBER, 6);
        assertEquals(false,  Market.isMarketOpen(c.getTime()), "Should close for Labor Day");

        c.set(2021, Calendar.NOVEMBER, 25);
        assertEquals(false,  Market.isMarketOpen(c.getTime()), "Should close for Thanksgiving Day");

        c.set(2020, Calendar.DECEMBER, 25);
        assertEquals(false,  Market.isMarketOpen(c.getTime()), "Should close for Chrismas Day");
    };

    @Test  // Market should not open on observed holidays
    public void testObservedHolidays() {
        c.set(2023, Calendar.JANUARY, 2);
        assertEquals(false,  Market.isMarketOpen(c.getTime()), "Should close for observed New Year's Day in 2023");

        c.set(2020, Calendar.JULY, 3);
        assertEquals(false,  Market.isMarketOpen(c.getTime()), "Should close for observed Independence Day in 2020");

        c.set(2021, Calendar.JULY, 5);
        assertEquals(false,  Market.isMarketOpen(c.getTime()), "Should close for observed Independence Day in 2021");

        c.set(2021, Calendar.DECEMBER, 24);
        assertEquals(false,  Market.isMarketOpen(c.getTime()), "Should close for observed Chrismas Day in 2021");

        c.set(2022, Calendar.DECEMBER, 26);
        assertEquals(false,  Market.isMarketOpen(c.getTime()), "Should close for observed Chrismas Day in 2022");

    };

    @Test  // Merket should not open on normal weekend
    public void testNormalWeekend() {
        c.set(2021, Calendar.FEBRUARY, 6);
        assertEquals(false,  Market.isMarketOpen(c.getTime()), "Should close for normal Saturday");

        c.set(2021, Calendar.FEBRUARY, 7);
        assertEquals(false,  Market.isMarketOpen(c.getTime()), "Should close for normal Sunday");

    };

    @Test  // Merket should open on normal workday
    public void testNormalWorkday() {
        c.set(2021, Calendar.FEBRUARY, 8);  // Monday
        assertEquals(true,  Market.isMarketOpen(c.getTime()), "Should open for normal workday");

        c.set(2020, Calendar.OCTOBER, 22);  // Thursday
        assertEquals(true,  Market.isMarketOpen(c.getTime()), "Should open for normal workday");

    };


}
